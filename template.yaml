Transform: AWS::Serverless-2016-10-31
Description: check stock levels of e-commerce websites

Resources:

  products: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "category"
          AttributeType: "S"
        - 
          AttributeName: "product"
          AttributeType: "S"
        - 
          AttributeName: "url"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "category"
          KeyType: "HASH"
        - 
          AttributeName: "product"
          KeyType: "RANGE"

  initatechecker:
    Type: AWS::Serverless::Function
    Properties:
        Handler: initate_checker.handler
        CodeUri: code/
        Runtime: python3.8
        Role: !GetAtt initiaterole.Arn
        Environment:
          Variables:
            queue_url: !Ref productqueue
            dynamodb: !Ref products
        Timeout: 60
        MemorySize: 1024
        Events:
          Schedule:
              Type: Schedule
              Properties:
                  Description: 12 hourly schedule for stock checking
                  Enabled: True
                  Name: bucketchecktrigger2
                  Schedule: 'cron(0 18 * * ? *)'
        Tracing: Active
  
  initiaterole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Description: Execution role for the initate_checker lambda
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: initiatepolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - 
              Action:
              - sqs:SendMessage
              Effect: Allow
              Resource: 
                Fn::GetAtt: 
                  - "productqueue"
                  - "Arn"
            - 
              Action:
              - dynamodb:Scan
              Effect: Allow
              Resource: "*"

  productqueue: 
    Type: AWS::SQS::Queue
    Properties: 
      RedrivePolicy: 
        deadLetterTargetArn: 
          Fn::GetAtt: 
            - "deadproductqueue"
            - "Arn"
        maxReceiveCount: 5
      VisibilityTimeout: 65

  deadproductqueue: 
    Type: AWS::SQS::Queue

  checkstock:
    Type: AWS::Serverless::Function
    Properties:
        Handler: check_stock.handler
        CodeUri: code/
        Runtime: python3.6
        Role: !GetAtt writerole.Arn
        Environment:
          Variables:
            queue_url: !Ref productqueue
        Timeout: 60
        MemorySize: 1024
        Tracing: Active
        Events:
          SQSEvent:
            Type: SQS
            Properties:
              Queue: 
                Fn::GetAtt: 
                  - "productqueue"
                  - "Arn"
              BatchSize: 1
        Layers:
        - !Ref requests
  
  requests:
      Type: AWS::Serverless::LayerVersion
      Properties:
          LayerName: selenium
          Description: Selenium layer, needed for webcrawling
          ContentUri: layers/selenium.zip
          CompatibleRuntimes:
              - python3.6
          RetentionPolicy: Retain
  
  checkerrole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Description: Execution role for the initate_checker lambda
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: checkerpolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - 
              Action:
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:ReceiveMessage              
              Effect: Allow
              Resource: 
                Fn::GetAtt: 
                  - "productqueue"
                  - "Arn"
            - 
              Action:
              - firehose:PutRecord
              Effect: Allow
              Resource: 
                Fn::GetAtt: 
                  - "deliverystream"
                  - "Arn"
                
  deliverystream:
    DependsOn:
      - deliveryPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref resultsbucket
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '50'
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/
        RoleARN: !GetAtt deliveryRole.Arn

  resultsbucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  deliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
  deliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref resultsbucket
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref resultsbucket
                  - '*'
      Roles:
        - !Ref deliveryRole